# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: Pack and Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ADMIN_APP_VERSION: '2.4.51'
  ADMIN_API_VERSION: '1.0.51'
  GA_MEASUREMENT_ID: ${{ secrets.GOOGLE_ANALYTICS_MEASUREMENT_ID}}
  ARTIFACTS_API_KEY: ${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}
  ARTIFACTS_FEED_URL: ${{ secrets.AZURE_ARTIFACTS_FEED_URL }}
  VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint": "${{ secrets.AZURE_ARTIFACTS_FEED_URL }}","password": "${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}"}]}'
  SBOM_NAME: "Admin-App-SBOM"
  MANIFEST_FILE: "_manifest/spdx_2.2/manifest.spdx.json"
  PROVENANCE_FILE: "multiple.intoto.jsonl"

jobs:
  pack:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    outputs:
      hashes: ${{ steps.hashes.outputs.hashes }}
      release-name: ${{ steps.release.outputs.api-release-name }}

    steps:
    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

    - name: Setup .NET
      uses: actions/setup-dotnet@9211491ffb35dd6a6657ca4f45d43dfe6e97c829 # v2.0.0
      with:
        dotnet-version: 6.0.x

    - name: Publish .NET Assemblies
      run: |
        ./build.ps1 -Command BuildAndPublish `
            -Configuration Release `
            -Version ${{ env.ADMIN_APP_VERSION }} `
            -APIVersion ${{ env.ADMIN_API_VERSION }} `
            -BuildCounter ${{ github.run_number }}

##
## Temporarily comment out because running this job in a fork that doesn't have the right secrets setup.
##

    # - name: Populate Google Analytics ID
    #   run: .\build.ps1 -Command PopulateGoogleAnalyticsAppSettings -GoogleAnalyticsMeasurementId ${{env.GA_MEASUREMENT_ID}}

    - name: Create NuGet Packages
      if: success()
      run: |
        ./build.ps1 -Command Package -Version ${{ env.ADMIN_APP_VERSION }} `
            -Configuration Release  -BuildCounter ${{ github.run_number }}
        ./build.ps1 -Command PackageDatabase -Version ${{ env.ADMIN_APP_VERSION }} `
            -Configuration Release -BuildCounter ${{ github.run_number }}
        ./build.ps1 -Command PackageApi -Version ${{ env.ADMIN_API_VERSION }} `
            -Configuration Release  -BuildCounter ${{ github.run_number }}

    - name: Generate hashes for NuGet packages
      id: hashes
      shell: bash
      run:
        echo "::set-output name=hashes-api::$(sha256sum  EdFi.Suite3.ODS.Admin.Api.*.nupkg | base64 -w0)"
        echo "::set-output name=hashes-db::$(sha256sum  EdFi.Suite3.ODS.Admin.Database.*.nupkg | base64 -w0)"
        echo "::set-output name=hashes-web::$(sha256sum  EdFi.Suite3.ODS.Admin.Web.*.nupkg | base64 -w0)"

    - name: Upload Package as Artifact
      if: success()
      uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
      with:
        name: NuGetPackages
        path: ./*.nupkg
        if-no-files-found: error
        retention-days: 30

    - name: Create Release for Admin API
      id: release
      run: |
        $release = "admin-api-${{ github.run_id }}"
        $repo = "${{ github.repository }}"
        $token = "${{ secrets.GITHUB_TOKEN }}"

        $url = "https://api.github.com/repos/$repo/releases"

        $gh_headers = @{
            "Accept"        = "application/vnd.github+json"
            "Authorization" = "Bearer $token"
        }

        $body = @{
            "tag_name" = "$release"
            "target_commitish" = "main"
            "name" = "$release"
            "body" = ""
            "draft" = $True
            "prerelease" = $False
            "generate_release_notes" = $False
        } | ConvertTo-Json

        Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $gh_headers
        "::set-output name=api-release-name::$release" | Write-Output

  sbom-create:
    runs-on: ubuntu-latest
    needs: pack
    permissions:
      actions: read
      id-token: write
      contents: write
    outputs:
      sbom-hash: ${{ steps.sbom-hash.outputs.sbom-hash }}
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

      - name: Get Artifacts
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 #v3.0.0
        with:
          name: NuGetPackages

      - name: Generate Software Bill of Materials (SBOM) - API
        shell: pwsh
        run: |
          $url = "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64"
          $out = "$($env:RUNNER_TEMP)/sbom-tool"
          Invoke-RestMethod -Uri $url -OutFile $out
          chmod +x $out

          Get-ChildItem -Include EdFi.Suite3.ODS.Admin.Api.*.nupkg -Recurse | ForEach-Object { $_.FullName } > buildfilelist.txt
          New-Item -Path manifest -Type Directory

          &$out generate `
              -b ./ `
              -bl ./buildfilelist.txt `
              -bc ./Application/EdFi.Ods.Admin.Api `
              -pn AdminApi `
              -pv ${{ env.ADMIN_APP_VERSION }} `
              -nsb https://ed-fi.org `
              -m manifest `
              -ps "Ed-Fi Alliance"

      - name: Upload SBOM - API
        if: success()
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
        with:
          name: ${{ env.SBOM_NAME }}-API
          path: ./manifest
          if-no-files-found: error
          retention-days: 30

      - name: Generate hashes for SBOM
        id: sbom-hash
        shell: bash
        run: |
          # sha256sum returns "<hashcode>  <name of file". Split that and return only the <hashcode>.
          sbom_hash=$(sha256sum ./manifest/${{ env.MANIFEST_FILE }} | awk '{split($0,a); print a[1]}')
          echo "::set-output name=sbom-hash-api::$sbom_hash"

  sbom-release-API:
    runs-on: ubuntu-latest
    needs: sbom-create
    permissions:
      actions: read
      contents: write
    steps:
      - name: Download the SBOM - API
        uses: slsa-framework/slsa-github-generator/.github/actions/secure-download-artifact@1d646d70aeba1516af69fb0ef48206580122449b
        with:
          name: ${{ env.SBOM_NAME }}-API
          path: ${{ env.MANIFEST_FILE }}
          sha256: "${{ needs.sbom-create.outputs.sbom-hash-api }}"

      - name: Attach to release
        shell: pwsh
        run: |
            $release = "${{ needs.pack.outputs.api-release-name }}"
            $repo = "${{ github.repository }}"
            $token = "${{ secrets.GITHUB_TOKEN }}"
            $file = "${{ env.MANIFEST_FILE }}"
            $uploadName = "API-SBOM-manifest.zip"

            $url = "https://api.github.com/repos/$repo/releases/tags/$release"

            $gh_headers = @{
                "Accept"        = "application/vnd.github+json"
                "Authorization" = "Bearer $token"
            }

            $response = Invoke-RestMethod -Uri $url -Headers $gh_headers
            $releaseId = $response.id

            $url = "https://uploads.github.com/repos/$repo/releases/$releaseId/assets"

            Compress-Archive $file -DestinationPath $uploadName

            $gh_headers["Content-Type"] = "application/octet"
            Invoke-RestMethod -Method POST `
                -Uri "$($url)?name=$($uploadName)" `
                -Headers $gh_headers `
                -InFile $uploadName

  provenance-API:
    needs: pack
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: ed-fi-alliance-oss/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.0
    with:
      base64-subjects: "${{ needs.pack.outputs.hashes-api }}"
      attestation-name: API.intoto.json
      # We do not yet have a release at the point when we run this, therefore
      # there is no release to which an asset can be uploaded.
      upload-assets: False

  provenance-release-API:
    runs-on: ubuntu-latest
    needs:
      - provenance-API
      - pack
    permissions:
      actions: read
      contents: write
    steps:
      - name: Split the hashcode
        id: split-hashcode
        run: |
          # sha256sum returns "<hashcode>  <name of file". Split that and return only the <hashcode>.
          set provenance_hash=$(echo "${{ needs.pack.outputs.hashes-api }}" | base64 -d | awk '{split($0,a); print a[1]}')
          echo "::set-output name=provenance_hash::$provenance_hash"

      - name: Download the Provenance
        uses: slsa-framework/slsa-github-generator/.github/actions/secure-download-artifact@1d646d70aeba1516af69fb0ef48206580122449b
        with:
          name: API.intoto.json
          path: API.intoto.json
          sha256: "${{ steps.split-hashcode.outputs.provenance_hash }}"

      - name: Attach to release
        shell: pwsh
        run: |
            $release = "${{ needs.pack.outputs.api-release-name }}"
            $repo = "${{ github.repository }}"
            $token = "${{ secrets.GITHUB_TOKEN }}"
            $file = API.intoto.json
            $uploadName = "API-provenance.zip"

            $url = "https://api.github.com/repos/$repo/releases/tags/$release"

            $gh_headers = @{
                "Accept"        = "application/vnd.github+json"
                "Authorization" = "Bearer $token"
            }

            $response = Invoke-RestMethod -Uri $url -Headers $gh_headers
            $releaseId = $response.id

            $url = "https://uploads.github.com/repos/$repo/releases/$releaseId/assets"

            Compress-Archive $file -DestinationPath $uploadName

            $gh_headers["Content-Type"] = "application/octet"
            Invoke-RestMethod -Method POST `
                -Uri "$($url)?name=$($uploadName)" `
                -Headers $gh_headers `
                -InFile $uploadName


##
## Temporarily comment out so as to avoid accidental publishing in this spike
##

#   publish-artifacts:
#     needs: pack

#     runs-on: ubuntu-latest

#     defaults:
#       run:
#         shell: pwsh

#     steps:
#       - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
#       - name: Get Artifact
#         uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 #v3.0.0
#         with:
#           name: NuGetPackages
#       - name: Install-credential-handler
#         run: iex "& { $(irm https://aka.ms/install-artifacts-credprovider.ps1) } -AddNetfx"
#       - name: Upload Admin API
#         run: |
#           $artifact = (Get-ChildItem -Path $_ -Name -Include EdFi.Suite3.ODS.Admin.Api.*.nupkg)
#           $arguments = @{
#             NuGetApiKey = "${{ env.ARTIFACTS_API_KEY }}"
#           }
#           $arguments.PackageFile = $artifact
#           ./build.ps1 Push @arguments
#       - name: Upload Admin App
#         run: |
#           $artifact = (Get-ChildItem -Path $_ -Name -Include EdFi.Suite3.ODS.AdminApp.Web.*.nupkg)
#           $arguments = @{
#             NuGetApiKey = "${{ env.ARTIFACTS_API_KEY }}"
#           }
#           $arguments.PackageFile = $artifact
#           ./build.ps1 Push @arguments
#       - name: Upload Admin Database
#         run: |
#           $artifact = (Get-ChildItem -Path $_ -Name -Include EdFi.Suite3.ODS.AdminApp.Database.*.nupkg)
#           $arguments = @{
#             NuGetApiKey = "${{ env.ARTIFACTS_API_KEY }}"
#           }
#           $arguments.PackageFile = $artifact
#           ./build.ps1 Push @arguments
